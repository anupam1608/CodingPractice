Problem : 	Say you have an array for which the ith element is the price of a given stock on day 			 i.
			If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

			Note that you cannot sell a stock before you buy one.

Example : 	Input: [7,1,5,3,6,4]
			Output: 5
			Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.

Solution : 	1) brute force - O(n^2)
			2) Single pass - O(n)
				In this solution need to just keep track of valleys(minimum price) and then check if difference of following peaks is greater than max profit.

Code :	
			int maxProfit(vector<int>& prices) {
	        int n = prices.size();
	        if(n==0) return 0;
	        int max_profit = 0, min_price = INT_MAX;
	        for(int i=0;i<n;i++){
	            min_price = min(min_price, prices[i]);
	            max_profit = max(max_profit, prices[i] - min_price);
	        }
	        return max_profit;
	        
	        
	    	}

Optimized code: 
			public int maxProfit(int[] prices) {
		    if(prices == null || prices.length < 2) return 0;      
		    int maxProfit = 0, minPrice = prices[0];
		    
		    for(int i = 1; i < prices.length; i++) {
		        if(prices[i] > prices[i - 1]) {
		            maxProfit = Math.max(maxProfit, prices[i] - minPrice);       
		        } else {
		             minPrice = Math.min(minPrice, prices[i]);
		        }
		    }

		    return maxProfit;
			}